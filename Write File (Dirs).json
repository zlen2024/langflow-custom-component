{"data":{"edges":[],"nodes":[{"data":{"node":{"template":{"_type":"Component","child_dir":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"child_dir","value":"output","display_name":"Child Directory","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Sub‑folder inside the parent directory where the file will be placed.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"# langflow/custom_components/write_file_with_dirs.py\r\n# ---------------------------------------------------------------------\r\n# Langflow component that writes a text file into a user‑specified\r\n# parent/child directory structure.  The component can also be used\r\n# as a LangChain tool via LCToolComponent.\r\n# ---------------------------------------------------------------------\r\n\r\nfrom pathlib import Path\r\n\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.io import MessageTextInput, Output\r\nfrom langflow.schema.data import Data\r\nfrom langflow.schema.message import Message\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\n\r\n\r\nclass WriteFileToolSchema(BaseModel):\r\n    \"\"\"Schema for the Write File tool arguments.\"\"\"\r\n\r\n    parent_dir: str = Field(\r\n        ...,\r\n        description=\"Base directory where the child folder will be created. \"\r\n        \"If it does not exist it will be created.\",\r\n    )\r\n    child_dir: str = Field(\r\n        ...,\r\n        description=\"Sub‑folder inside the parent directory where the file will be placed.\",\r\n    )\r\n    file_name: str = Field(..., description=\"Name of the file to create (including extension).\")\r\n    file_content: str = Field(..., description=\"Text content to write into the file.\")\r\n\r\n\r\nclass WriteFileWithDirsToolComponent(LCToolComponent):\r\n    \"\"\"\r\n    Write File with Parent/Child Directories\r\n\r\n    Creates a text file with the supplied name and content inside a\r\n    user‑specified folder hierarchy.  The component can be used in a\r\n    flow or added to an agent's toolkit as a LangChain tool.\r\n    \"\"\"\r\n\r\n    # ────── Component metadata ──────\r\n    display_name = \"Write File (Dirs)\"\r\n    description = (\r\n        \"Create a text file inside a specified parent/child directory structure.\"\r\n    )\r\n    documentation: str = (\r\n        \"https://docs.langflow.org/components-custom-components#write-file-dirs\"\r\n    )\r\n    icon = \"file-plus\"\r\n    name = \"WriteFileWithDirs\"\r\n\r\n    # ────── Inputs ──────\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"parent_dir\",\r\n            display_name=\"Parent Directory\",\r\n            info=\"Base directory where the child folder will be created. \"\r\n            \"If it does not exist it will be created.\",\r\n            value=\".\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"child_dir\",\r\n            display_name=\"Child Directory\",\r\n            info=\"Sub‑folder inside the parent directory where the file will be placed.\",\r\n            value=\"output\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"file_name\",\r\n            display_name=\"File Name\",\r\n            info=\"Name of the file to create (including extension).\",\r\n            value=\"\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"file_content\",\r\n            display_name=\"File Content\",\r\n            info=\"Text content to write into the file.\",\r\n            value=\"\",\r\n            tool_mode=True,\r\n        ),\r\n    ]\r\n\r\n    # ────── Outputs ──────\r\n    outputs = [\r\n        Output(\r\n            display_name=\"File Path\",\r\n            name=\"file_path\",\r\n            method=\"write_file\",\r\n            types=[\"Data\"],\r\n        )\r\n    ]\r\n\r\n    # ────── Core logic for normal component ──────\r\n    def write_file(self) -> Data:\r\n        \"\"\"\r\n        Resolve the directory hierarchy, create missing folders,\r\n        write the file, and return its absolute path.\r\n\r\n        Returns\r\n        -------\r\n        Data\r\n            Data object containing the path of the created file.\r\n        \"\"\"\r\n        # Resolve parent directory\r\n        parent_path = Path(self.parent_dir).expanduser().resolve()\r\n\r\n        # Resolve child directory and combine\r\n        full_dir = parent_path / self.child_dir\r\n\r\n        # Create the complete directory path\r\n        full_dir.mkdir(parents=True, exist_ok=True)\r\n\r\n        # Full file path\r\n        file_path = full_dir / self.file_name\r\n\r\n        # Write content\r\n        try:\r\n            file_path.write_text(self.file_content, encoding=\"utf-8\")\r\n        except Exception as exc:\r\n            raise RuntimeError(\r\n                f\"Failed to write file '{file_path}': {exc}\"\r\n            ) from exc\r\n\r\n        # Update status for UI and return Data\r\n        self.status = str(file_path)\r\n        return Data(data={\"path\": str(file_path)})\r\n\r\n    # ────── Tool integration ──────\r\n    def build_tool(self) -> StructuredTool:\r\n        \"\"\"\r\n        Return a LangChain StructuredTool that can be added to an agent.\r\n\r\n        Returns\r\n        -------\r\n        StructuredTool\r\n            Tool that writes a file and returns the absolute path.\r\n        \"\"\"\r\n        return StructuredTool.from_function(\r\n            name=\"write_file_with_dirs\",\r\n            description=(\r\n                \"Write a text file inside a specified parent/child directory structure. \"\r\n                \"Returns the absolute path of the created file.\"\r\n            ),\r\n            func=self._write_file_tool,\r\n            args_schema=WriteFileToolSchema,\r\n        )\r\n\r\n    # The function that the tool will call.\r\n    def _write_file_tool(\r\n        self,\r\n        parent_dir: str,\r\n        child_dir: str,\r\n        file_name: str,\r\n        file_content: str,\r\n    ) -> dict:\r\n        \"\"\"\r\n        Tool implementation that writes a file and returns its path.\r\n\r\n        Parameters\r\n        ----------\r\n        parent_dir : str\r\n            Base directory for the file.\r\n        child_dir : str\r\n            Sub‑folder inside the base directory.\r\n        file_name : str\r\n            Name of the file to create.\r\n        file_content : str\r\n            Content to write into the file.\r\n\r\n        Returns\r\n        -------\r\n        dict\r\n            Dictionary containing the absolute file path.\r\n        \"\"\"\r\n        # Resolve parent and child directories\r\n        parent_path = Path(parent_dir).expanduser().resolve()\r\n        full_dir = parent_path / child_dir\r\n        full_dir.mkdir(parents=True, exist_ok=True)\r\n\r\n        file_path = full_dir / file_name\r\n\r\n        try:\r\n            file_path.write_text(file_content, encoding=\"utf-8\")\r\n        except Exception as exc:\r\n            raise RuntimeError(\r\n                f\"Failed to write file '{file_path}': {exc}\"\r\n            ) from exc\r\n\r\n        # Update component status if used directly\r\n        self.status = str(file_path)\r\n\r\n        return {\"path\": str(file_path)}","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"file_content":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"file_content","value":"Hello, world!","display_name":"File Content","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text content to write into the file.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"file_name":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"file_name","value":"output.txt","display_name":"File Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Name of the file to create (including extension).","title_case":false,"type":"str","_input_type":"MessageTextInput"},"parent_dir":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"parent_dir","value":".","display_name":"Parent Directory","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Base directory where the child folder will be created. If it does not exist it will be created.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Create a text file inside a specified parent/child directory structure.","icon":"file-plus","base_classes":["Data"],"display_name":"Write File (Dirs)","documentation":"https://docs.langflow.org/components-custom-components#write-file-dirs","minimized":false,"custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"file_path","hidden":null,"display_name":"File Path","method":"write_file","value":"__UNDEFINED__","cache":true,"required_inputs":null,"allows_loop":false,"group_outputs":false,"options":null,"tool_mode":true}],"field_order":["parent_dir","child_dir","file_name","file_content"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"official":false},"showNode":true,"type":"WriteFileWithDirs","id":"CustomComponent-sdVuI"},"id":"CustomComponent-sdVuI","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Create a text file inside a specified parent/child directory structure.","name":"Write File (Dirs)","id":"CustomComponent-sdVuI","is_component":true,"last_tested_version":"1.5.0.post1"}