{"data":{"edges":[],"nodes":[{"data":{"node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"# langflow/custom_components/write_file_tool.py\r\n# --------------------------------------------------------\r\n# A Langflow component that writes a text file and can also be used as an agent tool.\r\n# --------------------------------------------------------\r\n\r\nfrom pathlib import Path\r\n\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.io import MessageTextInput, Output\r\nfrom langflow.schema.data import Data\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\n\r\n\r\nclass WriteFileToolSchema(BaseModel):\r\n    \"\"\"Pydantic schema for the Write File tool arguments.\"\"\"\r\n\r\n    directory: str = Field(\r\n        ..., description=\"Directory where the file will be created. It will be created if it does not exist.\"\r\n    )\r\n    file_name: str = Field(\r\n        ..., description=\"Name of the file to create (including extension).\"\r\n    )\r\n    file_content: str = Field(\r\n        ..., description=\"Text content to write into the file.\"\r\n    )\r\n\r\n\r\nclass WriteFileToolComponent(LCToolComponent):\r\n    \"\"\"\r\n    Write File\r\n\r\n    Creates a text file with the supplied name and content inside the\r\n    specified directory. The directory is automatically created if\r\n    it does not exist. This component can also be used as a LangChain\r\n    tool by an agent.\r\n    \"\"\"\r\n\r\n    # ────── Component metadata ──────\r\n    display_name = \"Write File\"\r\n    description = (\r\n        \"Create a file with the given name and content in a specified directory.\"\r\n    )\r\n    documentation: str = (\r\n        \"https://docs.langflow.org/components-custom-components#write-file\"\r\n    )\r\n    icon = \"file-plus\"\r\n    name = \"WriteFile\"\r\n\r\n    # ────── Inputs ──────\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"directory\",\r\n            display_name=\"Directory Path\",\r\n            info=\"Path to the directory where the file will be created. \"\r\n            \"It will be created if it does not exist.\",\r\n            value=\"\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"file_name\",\r\n            display_name=\"File Name\",\r\n            info=\"Name of the file to create (including extension).\",\r\n            value=\"output.txt\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"file_content\",\r\n            display_name=\"File Content\",\r\n            info=\"Text content to write into the file.\",\r\n            value=\"Hello, world!\",\r\n            tool_mode=True,\r\n        ),\r\n    ]\r\n\r\n    # ────── Outputs ──────\r\n    outputs = [\r\n        Output(\r\n            display_name=\"File Path\",\r\n            name=\"file_path\",\r\n            method=\"write_file\",\r\n            types=[\"Data\"],\r\n        )\r\n    ]\r\n\r\n    # ────── Core logic for normal component ──────\r\n    def write_file(self) -> Data:\r\n        \"\"\"\r\n        Create the directory (if needed), write the file, and return its path.\r\n\r\n        Returns\r\n        -------\r\n        Data\r\n            A Data object containing the absolute file path.\r\n        \"\"\"\r\n        dir_path = Path(self.directory).expanduser().resolve()\r\n        dir_path.mkdir(parents=True, exist_ok=True)\r\n\r\n        file_path = dir_path / self.file_name\r\n\r\n        try:\r\n            file_path.write_text(self.file_content, encoding=\"utf-8\")\r\n        except Exception as exc:\r\n            raise RuntimeError(\r\n                f\"Failed to write file '{file_path}': {exc}\"\r\n            ) from exc\r\n\r\n        self.status = str(file_path)\r\n        return Data(data={\"path\": str(file_path)})\r\n\r\n    # ────── Tool integration ──────\r\n    def build_tool(self) -> StructuredTool:\r\n        \"\"\"\r\n        Convert this component into a LangChain StructuredTool for agent use.\r\n\r\n        Returns\r\n        -------\r\n        StructuredTool\r\n            The tool that can be added to an agent's toolkit.\r\n        \"\"\"\r\n        return StructuredTool.from_function(\r\n            name=\"write_file\",\r\n            description=\"Write a text file to a specified directory. Returns the absolute path of the created file.\",\r\n            func=self._write_file_tool,\r\n            args_schema=WriteFileToolSchema,\r\n        )\r\n\r\n    # The function that the tool will call. It receives the arguments from the agent.\r\n    def _write_file_tool(\r\n        self,\r\n        directory: str,\r\n        file_name: str,\r\n        file_content: str,\r\n    ) -> dict:\r\n        \"\"\"\r\n        Tool implementation that writes a file and returns its path.\r\n\r\n        Parameters\r\n        ----------\r\n        directory : str\r\n            Target directory.\r\n        file_name : str\r\n            Name of the file (with extension).\r\n        file_content : str\r\n            Content to write.\r\n\r\n        Returns\r\n        -------\r\n        dict\r\n            Dictionary containing the absolute file path.\r\n        \"\"\"\r\n        # Use the same logic as write_file but with the passed arguments\r\n        dir_path = Path(directory).expanduser().resolve()\r\n        dir_path.mkdir(parents=True, exist_ok=True)\r\n\r\n        file_path = dir_path / file_name\r\n\r\n        try:\r\n            file_path.write_text(file_content, encoding=\"utf-8\")\r\n        except Exception as exc:\r\n            raise RuntimeError(\r\n                f\"Failed to write file '{file_path}': {exc}\"\r\n            ) from exc\r\n\r\n        # Update status for UI visibility if the component is used directly\r\n        self.status = str(file_path)\r\n\r\n        return {\"path\": str(file_path)}","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"directory":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"directory","value":".","display_name":"Directory Path","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Path to the directory where the file will be created. It will be created if it does not exist.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"file_content":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"file_content","value":"Hello, world!","display_name":"File Content","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text content to write into the file.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"file_name":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"file_name","value":"output.txt","display_name":"File Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Name of the file to create (including extension).","title_case":false,"type":"str","_input_type":"MessageTextInput"},"tools_metadata":{"tool_mode":false,"trace_as_metadata":true,"is_list":true,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"tools_metadata","value":[{"name":"write_file","description":"Create a file with the given name and content in a specified directory.","tags":["write_file"],"status":true,"display_name":"write_file","display_description":"Create a file with the given name and content in a specified directory.","readonly":false,"args":{"directory":{"default":"","description":"Path to the directory where the file will be created. It will be created if it does not exist.","title":"Directory","type":"string"},"file_name":{"default":"output.txt","description":"Name of the file to create (including extension).","title":"File Name","type":"string"},"file_content":{"default":"Hello, world!","description":"Text content to write into the file.","title":"File Content","type":"string"}}}],"display_name":"Actions","advanced":false,"dynamic":false,"info":"Modify tool names and descriptions to help agents understand when to use each tool.","real_time_refresh":true,"title_case":false,"type":"tools","_input_type":"ToolsInput"}},"description":"Create a file with the given name and content in a specified directory.","icon":"file-plus","base_classes":["Data"],"display_name":"Write File","documentation":"https://docs.langflow.org/components-custom-components#write-file","minimized":false,"custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Tool"],"selected":"Tool","name":"component_as_tool","hidden":null,"display_name":"Toolset","method":"to_toolkit","value":"__UNDEFINED__","cache":true,"required_inputs":null,"allows_loop":false,"group_outputs":false,"options":null,"tool_mode":true}],"field_order":["directory","file_name","file_content"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":true,"official":false},"showNode":true,"type":"WriteFile","id":"CustomComponent-eRVmc"},"id":"CustomComponent-eRVmc","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Create a file with the given name and content in a specified directory.","name":"Write File","id":"CustomComponent-eRVmc","is_component":true,"last_tested_version":"1.5.0.post1"}